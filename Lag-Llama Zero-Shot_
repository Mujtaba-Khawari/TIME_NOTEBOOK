{"cells":[{"cell_type":"markdown","metadata":{"id":"TO5a25UvvKdt"},"source":["# Lag-Llama: Towards Foundation Models for Probabilistic Time Series Forecasting\n","\n","![lag-llama-architecture](https://raw.githubusercontent.com/time-series-foundation-models/lag-llama/main/images/lagllama.webp)\n","\n","Lag-Llama is the <b>first open-source foundation model for time series forecasting</b>!\n","\n","[[Tweet Thread](https://twitter.com/arjunashok37/status/1755261111233114165)] [[Model Weights](https://huggingface.co/time-series-foundation-models/Lag-Llama)] [[Colab Demo on Zero-Shot Forecasting](https://colab.research.google.com/drive/1XxrLW9VGPlZDw3efTvUi0hQimgJOwQG6?usp=sharing)] [[GitHub](https://github.com/time-series-foundation-models/lag-llama)] [[Paper](https://arxiv.org/abs/2310.08278)]\n","\n","💫 This Colab Demo shows you how to use the pretrained Lag-Llama model to get zero-shot predictions on time series, with the ability to load time series of different formats.\n"]},{"cell_type":"markdown","metadata":{"id":"cXn8fRA1Svzn"},"source":["# Updates\n","\n","## Update 13/Nov\n","\n","Updated the API to use gluonts 0.16.0.\n","\n","## Update 05/Apr\n","\n","Added section at the end on the importance of tuning the context length.\n","\n","\n","## Update 07/Mar\n","\n","We have released a preliminary [Colab Demo 2](https://colab.research.google.com/drive/1uvTmh-pe1zO5TeaaRVDdoEWJ5dFDI-pA?usp=sharing) for finetuning. A detailed demo with instructions for benchmarking is coming soon along with the tutorial.\n","\n","Note that Colab Demo 2 is for finetuning, while Colab Demo 1 (this Colab) is for zero-shot forecasting.\n","\n","## Update 17/Feb\n","\n","This Colab demo 1 for zero-shot forecasting is an update to the [previous Colab demo 1](https://colab.research.google.com/drive/13HHKYL_HflHBKxDWycXgIUAHSeHRR5eo?usp=sharing). In this notebook, we show **how one can load time series in different formats**.\n","\n","If your time series is of a format that is not described here, please create [an issue in our GitHub repository](https://github.com/time-series-foundation-models/lag-llama/issues), and we can discuss how to load it.\n","\n","-------\n"]},{"cell_type":"markdown","source":["**Please make a copy of this notebook if you would like to save your changes (File -> Save a copy in ...)**"],"metadata":{"id":"T0CQQK7fq-zp"}},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"id":"a9RGWNuqSvzn"},"source":["# Prepare the repository"]},{"cell_type":"markdown","metadata":{"id":"tOXCa0QMww2X"},"source":["We first clone and install the required packages from the [GitHub repository](https://github.com/time-series-foundation-models/lag-llama/) that has the Lag-Llama architecture.\n","\n"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ImFamWelKYjY","outputId":"a3b5a376-a05f-4887-bed0-a16def009069","executionInfo":{"status":"ok","timestamp":1746616382731,"user_tz":-180,"elapsed":1153,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'lag-llama'...\n","remote: Enumerating objects: 505, done.\u001b[K\n","remote: Counting objects: 100% (193/193), done.\u001b[K\n","remote: Compressing objects: 100% (84/84), done.\u001b[K\n","remote: Total 505 (delta 154), reused 109 (delta 109), pack-reused 312 (from 3)\u001b[K\n","Receiving objects: 100% (505/505), 283.34 KiB | 4.29 MiB/s, done.\n","Resolving deltas: 100% (252/252), done.\n"]}],"source":["!git clone -b update-gluonts https://github.com/time-series-foundation-models/lag-llama/"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N43EeAQTVJ9t","outputId":"33339b78-6d9b-4dab-eb5d-d117115cc160","executionInfo":{"status":"ok","timestamp":1746616383846,"user_tz":-180,"elapsed":8,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/lag-llama\n"]}],"source":["cd /content/lag-llama"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"MKQpOLIIVLH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746616493931,"user_tz":-180,"elapsed":108757,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}},"outputId":"f9ddc047-4a43-4321-ab7d-df1ea4038583"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: wandb in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 2)) (0.19.10)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 3)) (1.15.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 5)) (3.10.0)\n","Collecting gluonts[torch] (from -r requirements.txt (line 1))\n","  Downloading gluonts-0.16.1-py3-none-any.whl.metadata (9.8 kB)\n","Requirement already satisfied: huggingface_hub[cli] in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 4)) (0.30.2)\n","Requirement already satisfied: numpy<2.2,>=1.16 in /usr/local/lib/python3.11/dist-packages (from gluonts[torch]->-r requirements.txt (line 1)) (2.0.2)\n","Requirement already satisfied: pandas<3,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gluonts[torch]->-r requirements.txt (line 1)) (2.2.2)\n","Requirement already satisfied: pydantic<3,>=1.7 in /usr/local/lib/python3.11/dist-packages (from gluonts[torch]->-r requirements.txt (line 1)) (2.11.4)\n","Requirement already satisfied: tqdm~=4.23 in /usr/local/lib/python3.11/dist-packages (from gluonts[torch]->-r requirements.txt (line 1)) (4.67.1)\n","Requirement already satisfied: toolz~=0.10 in /usr/local/lib/python3.11/dist-packages (from gluonts[torch]->-r requirements.txt (line 1)) (0.12.1)\n","Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.11/dist-packages (from gluonts[torch]->-r requirements.txt (line 1)) (4.13.2)\n","Requirement already satisfied: torch<3,>=1.9 in /usr/local/lib/python3.11/dist-packages (from gluonts[torch]->-r requirements.txt (line 1)) (2.6.0+cu124)\n","Collecting lightning<2.5,>=2.2.2 (from gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading lightning-2.4.0-py3-none-any.whl.metadata (38 kB)\n","Collecting pytorch-lightning<2.5,>=2.2.2 (from gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading pytorch_lightning-2.4.0-py3-none-any.whl.metadata (21 kB)\n","Requirement already satisfied: click!=8.0.0,>=7.1 in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (8.1.8)\n","Requirement already satisfied: docker-pycreds>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (0.4.0)\n","Requirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (3.1.44)\n","Requirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (4.3.7)\n","Requirement already satisfied: protobuf!=4.21.0,!=5.28.0,<7,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (5.29.4)\n","Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (5.9.5)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (6.0.2)\n","Requirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (2.32.3)\n","Requirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (2.27.0)\n","Requirement already satisfied: setproctitle in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (1.3.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from wandb->-r requirements.txt (line 2)) (75.2.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface_hub[cli]->-r requirements.txt (line 4)) (3.18.0)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface_hub[cli]->-r requirements.txt (line 4)) (2025.3.2)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.11/dist-packages (from huggingface_hub[cli]->-r requirements.txt (line 4)) (24.2)\n","Collecting InquirerPy==0.3.4 (from huggingface_hub[cli]->-r requirements.txt (line 4))\n","  Downloading InquirerPy-0.3.4-py3-none-any.whl.metadata (8.1 kB)\n","Collecting pfzy<0.4.0,>=0.3.1 (from InquirerPy==0.3.4->huggingface_hub[cli]->-r requirements.txt (line 4))\n","  Downloading pfzy-0.3.4-py3-none-any.whl.metadata (4.9 kB)\n","Requirement already satisfied: prompt-toolkit<4.0.0,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from InquirerPy==0.3.4->huggingface_hub[cli]->-r requirements.txt (line 4)) (3.0.51)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->-r requirements.txt (line 5)) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->-r requirements.txt (line 5)) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->-r requirements.txt (line 5)) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->-r requirements.txt (line 5)) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->-r requirements.txt (line 5)) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->-r requirements.txt (line 5)) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->-r requirements.txt (line 5)) (2.9.0.post0)\n","Requirement already satisfied: six>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from docker-pycreds>=0.4.0->wandb->-r requirements.txt (line 2)) (1.17.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb->-r requirements.txt (line 2)) (4.0.12)\n","Collecting lightning-utilities<2.0,>=0.10.0 (from lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading lightning_utilities-0.14.3-py3-none-any.whl.metadata (5.6 kB)\n","Collecting torchmetrics<3.0,>=0.7.0 (from lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading torchmetrics-1.7.1-py3-none-any.whl.metadata (21 kB)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.0->gluonts[torch]->-r requirements.txt (line 1)) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.0->gluonts[torch]->-r requirements.txt (line 1)) (2025.2)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.7->gluonts[torch]->-r requirements.txt (line 1)) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.7->gluonts[torch]->-r requirements.txt (line 1)) (2.33.2)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.7->gluonts[torch]->-r requirements.txt (line 1)) (0.4.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb->-r requirements.txt (line 2)) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb->-r requirements.txt (line 2)) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb->-r requirements.txt (line 2)) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb->-r requirements.txt (line 2)) (2025.4.26)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (3.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (3.1.6)\n","Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cublas-cu12==12.4.5.8 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufft-cu12==11.2.1.3 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-curand-cu12==10.3.5.147 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (0.6.2)\n","Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (12.4.127)\n","Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1))\n","  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (1.3.0)\n","Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (3.11.15)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb->-r requirements.txt (line 2)) (5.0.2)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit<4.0.0,>=3.0.1->InquirerPy==0.3.4->huggingface_hub[cli]->-r requirements.txt (line 4)) (0.2.13)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch<3,>=1.9->gluonts[torch]->-r requirements.txt (line 1)) (3.0.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (2.6.1)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (1.3.2)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (25.3.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (1.6.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (6.4.3)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (0.3.1)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<2026.0,>=2022.5.0->lightning<2.5,>=2.2.2->gluonts[torch]->-r requirements.txt (line 1)) (1.20.0)\n","Downloading InquirerPy-0.3.4-py3-none-any.whl (67 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.7/67.7 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading lightning-2.4.0-py3-none-any.whl (810 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m811.0/811.0 kB\u001b[0m \u001b[31m21.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pytorch_lightning-2.4.0-py3-none-any.whl (815 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m815.2/815.2 kB\u001b[0m \u001b[31m36.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m70.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m56.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m45.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m32.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading gluonts-0.16.1-py3-none-any.whl (1.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m49.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading lightning_utilities-0.14.3-py3-none-any.whl (28 kB)\n","Downloading pfzy-0.3.4-py3-none-any.whl (8.5 kB)\n","Downloading torchmetrics-1.7.1-py3-none-any.whl (961 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m961.5/961.5 kB\u001b[0m \u001b[31m46.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pfzy, nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, lightning-utilities, nvidia-cusparse-cu12, nvidia-cudnn-cu12, InquirerPy, nvidia-cusolver-cu12, gluonts, torchmetrics, pytorch-lightning, lightning\n","  Attempting uninstall: nvidia-nvjitlink-cu12\n","    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n","    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n","      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n","  Attempting uninstall: nvidia-curand-cu12\n","    Found existing installation: nvidia-curand-cu12 10.3.6.82\n","    Uninstalling nvidia-curand-cu12-10.3.6.82:\n","      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n","  Attempting uninstall: nvidia-cufft-cu12\n","    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n","    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n","      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n","  Attempting uninstall: nvidia-cuda-runtime-cu12\n","    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n","    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n","    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n","    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-cupti-cu12\n","    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n","    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n","  Attempting uninstall: nvidia-cublas-cu12\n","    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n","    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n","      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n","  Attempting uninstall: nvidia-cusparse-cu12\n","    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n","    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n","      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n","  Attempting uninstall: nvidia-cudnn-cu12\n","    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n","    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n","      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n","  Attempting uninstall: nvidia-cusolver-cu12\n","    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n","    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n","      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n","Successfully installed InquirerPy-0.3.4 gluonts-0.16.1 lightning-2.4.0 lightning-utilities-0.14.3 nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127 pfzy-0.3.4 pytorch-lightning-2.4.0 torchmetrics-1.7.1\n"]}],"source":["!pip install -r requirements.txt  # this could take some time # ignore the errors displayed by colab"]},{"cell_type":"code","source":["!pip install -U torch torchvision"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H7BglT92SCZt","executionInfo":{"status":"ok","timestamp":1746616713220,"user_tz":-180,"elapsed":215267,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}},"outputId":"71d8c6ca-1d8f-4841-c910-6b21a2206936"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n","Collecting torch\n","  Downloading torch-2.7.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (29 kB)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.11/dist-packages (0.21.0+cu124)\n","Collecting torchvision\n","  Downloading torchvision-0.22.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (6.1 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.18.0)\n","Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n","Collecting sympy>=1.13.3 (from torch)\n","  Downloading sympy-1.14.0-py3-none-any.whl.metadata (12 kB)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n","Collecting nvidia-cuda-nvrtc-cu12==12.6.77 (from torch)\n","  Downloading nvidia_cuda_nvrtc_cu12-12.6.77-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-runtime-cu12==12.6.77 (from torch)\n","  Downloading nvidia_cuda_runtime_cu12-12.6.77-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.6.80 (from torch)\n","  Downloading nvidia_cuda_cupti_cu12-12.6.80-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cudnn-cu12==9.5.1.17 (from torch)\n","  Downloading nvidia_cudnn_cu12-9.5.1.17-py3-none-manylinux_2_28_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cublas-cu12==12.6.4.1 (from torch)\n","  Downloading nvidia_cublas_cu12-12.6.4.1-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufft-cu12==11.3.0.4 (from torch)\n","  Downloading nvidia_cufft_cu12-11.3.0.4-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-curand-cu12==10.3.7.77 (from torch)\n","  Downloading nvidia_curand_cu12-10.3.7.77-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cusolver-cu12==11.7.1.2 (from torch)\n","  Downloading nvidia_cusolver_cu12-11.7.1.2-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparse-cu12==12.5.4.2 (from torch)\n","  Downloading nvidia_cusparse_cu12-12.5.4.2-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparselt-cu12==0.6.3 (from torch)\n","  Downloading nvidia_cusparselt_cu12-0.6.3-py3-none-manylinux2014_x86_64.whl.metadata (6.8 kB)\n","Collecting nvidia-nccl-cu12==2.26.2 (from torch)\n","  Downloading nvidia_nccl_cu12-2.26.2-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.0 kB)\n","Collecting nvidia-nvtx-cu12==12.6.77 (from torch)\n","  Downloading nvidia_nvtx_cu12-12.6.77-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-nvjitlink-cu12==12.6.85 (from torch)\n","  Downloading nvidia_nvjitlink_cu12-12.6.85-py3-none-manylinux2010_x86_64.manylinux_2_12_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufile-cu12==1.11.1.6 (from torch)\n","  Downloading nvidia_cufile_cu12-1.11.1.6-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.5 kB)\n","Collecting triton==3.3.0 (from torch)\n","  Downloading triton-3.3.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: setuptools>=40.8.0 in /usr/local/lib/python3.11/dist-packages (from triton==3.3.0->torch) (75.2.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torchvision) (2.0.2)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.11/dist-packages (from torchvision) (11.2.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy>=1.13.3->torch) (1.3.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n","Downloading torch-2.7.0-cp311-cp311-manylinux_2_28_x86_64.whl (865.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m865.2/865.2 MB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cublas_cu12-12.6.4.1-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (393.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m393.1/393.1 MB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.6.80-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (8.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m114.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.6.77-py3-none-manylinux2014_x86_64.whl (23.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m23.7/23.7 MB\u001b[0m \u001b[31m80.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.6.77-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (897 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m897.7/897.7 kB\u001b[0m \u001b[31m44.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cudnn_cu12-9.5.1.17-py3-none-manylinux_2_28_x86_64.whl (571.0 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m571.0/571.0 MB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cufft_cu12-11.3.0.4-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (200.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m200.2/200.2 MB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cufile_cu12-1.11.1.6-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (1.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m42.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_curand_cu12-10.3.7.77-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (56.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusolver_cu12-11.7.1.2-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (158.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m158.2/158.2 MB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusparse_cu12-12.5.4.2-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (216.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m216.6/216.6 MB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusparselt_cu12-0.6.3-py3-none-manylinux2014_x86_64.whl (156.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m156.8/156.8 MB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_nccl_cu12-2.26.2-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (201.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m201.3/201.3 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.6.85-py3-none-manylinux2010_x86_64.manylinux_2_12_x86_64.whl (19.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.7/19.7 MB\u001b[0m \u001b[31m84.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_nvtx_cu12-12.6.77-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (89 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.3/89.3 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading triton-3.3.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (156.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m156.5/156.5 MB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading torchvision-0.22.0-cp311-cp311-manylinux_2_28_x86_64.whl (7.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.4/7.4 MB\u001b[0m \u001b[31m100.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading sympy-1.14.0-py3-none-any.whl (6.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.3/6.3 MB\u001b[0m \u001b[31m93.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: nvidia-cusparselt-cu12, triton, sympy, nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufile-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cufft-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, torch, torchvision\n","  Attempting uninstall: nvidia-cusparselt-cu12\n","    Found existing installation: nvidia-cusparselt-cu12 0.6.2\n","    Uninstalling nvidia-cusparselt-cu12-0.6.2:\n","      Successfully uninstalled nvidia-cusparselt-cu12-0.6.2\n","  Attempting uninstall: triton\n","    Found existing installation: triton 3.2.0\n","    Uninstalling triton-3.2.0:\n","      Successfully uninstalled triton-3.2.0\n","  Attempting uninstall: sympy\n","    Found existing installation: sympy 1.13.1\n","    Uninstalling sympy-1.13.1:\n","      Successfully uninstalled sympy-1.13.1\n","  Attempting uninstall: nvidia-nvtx-cu12\n","    Found existing installation: nvidia-nvtx-cu12 12.4.127\n","    Uninstalling nvidia-nvtx-cu12-12.4.127:\n","      Successfully uninstalled nvidia-nvtx-cu12-12.4.127\n","  Attempting uninstall: nvidia-nvjitlink-cu12\n","    Found existing installation: nvidia-nvjitlink-cu12 12.4.127\n","    Uninstalling nvidia-nvjitlink-cu12-12.4.127:\n","      Successfully uninstalled nvidia-nvjitlink-cu12-12.4.127\n","  Attempting uninstall: nvidia-nccl-cu12\n","    Found existing installation: nvidia-nccl-cu12 2.21.5\n","    Uninstalling nvidia-nccl-cu12-2.21.5:\n","      Successfully uninstalled nvidia-nccl-cu12-2.21.5\n","  Attempting uninstall: nvidia-curand-cu12\n","    Found existing installation: nvidia-curand-cu12 10.3.5.147\n","    Uninstalling nvidia-curand-cu12-10.3.5.147:\n","      Successfully uninstalled nvidia-curand-cu12-10.3.5.147\n","  Attempting uninstall: nvidia-cuda-runtime-cu12\n","    Found existing installation: nvidia-cuda-runtime-cu12 12.4.127\n","    Uninstalling nvidia-cuda-runtime-cu12-12.4.127:\n","      Successfully uninstalled nvidia-cuda-runtime-cu12-12.4.127\n","  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n","    Found existing installation: nvidia-cuda-nvrtc-cu12 12.4.127\n","    Uninstalling nvidia-cuda-nvrtc-cu12-12.4.127:\n","      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.4.127\n","  Attempting uninstall: nvidia-cuda-cupti-cu12\n","    Found existing installation: nvidia-cuda-cupti-cu12 12.4.127\n","    Uninstalling nvidia-cuda-cupti-cu12-12.4.127:\n","      Successfully uninstalled nvidia-cuda-cupti-cu12-12.4.127\n","  Attempting uninstall: nvidia-cublas-cu12\n","    Found existing installation: nvidia-cublas-cu12 12.4.5.8\n","    Uninstalling nvidia-cublas-cu12-12.4.5.8:\n","      Successfully uninstalled nvidia-cublas-cu12-12.4.5.8\n","  Attempting uninstall: nvidia-cusparse-cu12\n","    Found existing installation: nvidia-cusparse-cu12 12.3.1.170\n","    Uninstalling nvidia-cusparse-cu12-12.3.1.170:\n","      Successfully uninstalled nvidia-cusparse-cu12-12.3.1.170\n","  Attempting uninstall: nvidia-cufft-cu12\n","    Found existing installation: nvidia-cufft-cu12 11.2.1.3\n","    Uninstalling nvidia-cufft-cu12-11.2.1.3:\n","      Successfully uninstalled nvidia-cufft-cu12-11.2.1.3\n","  Attempting uninstall: nvidia-cudnn-cu12\n","    Found existing installation: nvidia-cudnn-cu12 9.1.0.70\n","    Uninstalling nvidia-cudnn-cu12-9.1.0.70:\n","      Successfully uninstalled nvidia-cudnn-cu12-9.1.0.70\n","  Attempting uninstall: nvidia-cusolver-cu12\n","    Found existing installation: nvidia-cusolver-cu12 11.6.1.9\n","    Uninstalling nvidia-cusolver-cu12-11.6.1.9:\n","      Successfully uninstalled nvidia-cusolver-cu12-11.6.1.9\n","  Attempting uninstall: torch\n","    Found existing installation: torch 2.6.0+cu124\n","    Uninstalling torch-2.6.0+cu124:\n","      Successfully uninstalled torch-2.6.0+cu124\n","  Attempting uninstall: torchvision\n","    Found existing installation: torchvision 0.21.0+cu124\n","    Uninstalling torchvision-0.21.0+cu124:\n","      Successfully uninstalled torchvision-0.21.0+cu124\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","fastai 2.7.19 requires torch<2.7,>=1.10, but you have torch 2.7.0 which is incompatible.\n","torchaudio 2.6.0+cu124 requires torch==2.6.0, but you have torch 2.7.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed nvidia-cublas-cu12-12.6.4.1 nvidia-cuda-cupti-cu12-12.6.80 nvidia-cuda-nvrtc-cu12-12.6.77 nvidia-cuda-runtime-cu12-12.6.77 nvidia-cudnn-cu12-9.5.1.17 nvidia-cufft-cu12-11.3.0.4 nvidia-cufile-cu12-1.11.1.6 nvidia-curand-cu12-10.3.7.77 nvidia-cusolver-cu12-11.7.1.2 nvidia-cusparse-cu12-12.5.4.2 nvidia-cusparselt-cu12-0.6.3 nvidia-nccl-cu12-2.26.2 nvidia-nvjitlink-cu12-12.6.85 nvidia-nvtx-cu12-12.6.77 sympy-1.14.0 torch-2.7.0 torchvision-0.22.0 triton-3.3.0\n"]}]},{"cell_type":"markdown","source":["**Restart your runtime session now, and then continue**"],"metadata":{"id":"xkfhobap1inw"}},{"cell_type":"code","source":["cd /content/lag-llama"],"metadata":{"id":"eCbjmxMD1kQG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746624719769,"user_tz":-180,"elapsed":9,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}},"outputId":"c2486f05-4a94-473f-c4d9-01ce51b00391"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/lag-llama\n"]}]},{"cell_type":"markdown","metadata":{"id":"7lYRdsCexJEB"},"source":["We then download our pretrained model weights from [HuggingFace](https://huggingface.co/time-series-foundation-models/Lag-Llama) 🤗"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lQJbUY-9c2RQ","outputId":"c41aee97-75b5-4617-f449-103bd27bb9c8","executionInfo":{"status":"ok","timestamp":1746624721975,"user_tz":-180,"elapsed":892,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/lag-llama/lag-llama.ckpt\n"]}],"source":["!huggingface-cli download time-series-foundation-models/Lag-Llama lag-llama.ckpt --local-dir /content/lag-llama"]},{"cell_type":"markdown","metadata":{"id":"MVdy0dIDxRRY"},"source":["We import the required packages and the lag llama estimator object which we can use to make predictions."]},{"cell_type":"code","execution_count":36,"metadata":{"id":"vPBAO18DWT8A","executionInfo":{"status":"ok","timestamp":1746624725183,"user_tz":-180,"elapsed":7,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"outputs":[],"source":["from itertools import islice\n","\n","from matplotlib import pyplot as plt\n","import matplotlib.dates as mdates\n","\n","import torch\n","#from gluonts.evaluation import make_evaluation_predictions, Evaluator\n","#from gluonts.dataset.repository.datasets import get_dataset\n","\n","from gluonts.dataset.pandas import PandasDataset\n","import pandas as pd\n","import numpy as np\n","\n","from lag_llama.gluon.estimator import LagLlamaEstimator"]},{"cell_type":"code","source":["import sys\n","from types import ModuleType\n","\n","# Create dummy module hierarchy\n","def create_dummy_module(module_path):\n","    \"\"\"\n","    Create a dummy module hierarchy for the given path.\n","    Returns the leaf module.\n","    \"\"\"\n","    parts = module_path.split('.')\n","    current = ''\n","    parent = None\n","\n","    for part in parts:\n","        current = current + '.' + part if current else part\n","        if current not in sys.modules:\n","            module = ModuleType(current)\n","            sys.modules[current] = module\n","            if parent:\n","                setattr(sys.modules[parent], part, module)\n","        parent = current\n","\n","    return sys.modules[module_path]\n","\n","# Create the dummy gluonts module hierarchy\n","gluonts_module = create_dummy_module('gluonts.torch.modules.loss')\n","\n","# Create dummy classes for the specific loss functions\n","class DistributionLoss:\n","    def __init__(self, *args, **kwargs):\n","        pass\n","\n","    def __call__(self, *args, **kwargs):\n","        return 0.0\n","\n","    def __getattr__(self, name):\n","        return lambda *args, **kwargs: None\n","\n","class NegativeLogLikelihood:\n","    def __init__(self, *args, **kwargs):\n","        pass\n","\n","    def __call__(self, *args, **kwargs):\n","        return 0.0\n","\n","    def __getattr__(self, name):\n","        return lambda *args, **kwargs: None\n","\n","# Add the specific classes to the module\n","gluonts_module.DistributionLoss = DistributionLoss\n","gluonts_module.NegativeLogLikelihood = NegativeLogLikelihood"],"metadata":{"id":"BSNBysopSbXE","executionInfo":{"status":"ok","timestamp":1746624726731,"user_tz":-180,"elapsed":3,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"execution_count":37,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"id":"icj6p9n6Svzq"},"source":["# Lag-Llama prediction function\n","\n","We create a function for Lag-Llama inference that we can reuse for all different types of dataset below. This function returns the predictions for the given prediction horizon. The forecast will be of shape (`num_samples`, `prediction_length`), where `num_samples` is the number of samples sampled from the predicted probability distribution for each timestep.\n"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"gyH5Xq9eSvzq","executionInfo":{"status":"ok","timestamp":1746624732882,"user_tz":-180,"elapsed":9,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"outputs":[],"source":["def get_lag_llama_predictions(dataset, prediction_length, device, context_length=32, use_rope_scaling=False, num_samples=100):\n","    ckpt = torch.load(\"lag-llama.ckpt\", map_location=device, weights_only=False) # Uses GPU since in this Colab we use a GPU.\n","    estimator_args = ckpt[\"hyper_parameters\"][\"model_kwargs\"]\n","\n","    rope_scaling_arguments = {\n","        \"type\": \"linear\",\n","        \"factor\": max(1.0, (context_length + prediction_length) / estimator_args[\"context_length\"]),\n","    }\n","\n","    estimator = LagLlamaEstimator(\n","        ckpt_path=\"lag-llama.ckpt\",\n","        prediction_length=prediction_length,\n","        context_length=context_length, # Lag-Llama was trained with a context length of 32, but can work with any context length\n","\n","        # estimator args\n","        input_size=estimator_args[\"input_size\"],\n","        n_layer=estimator_args[\"n_layer\"],\n","        n_embd_per_head=estimator_args[\"n_embd_per_head\"],\n","        n_head=estimator_args[\"n_head\"],\n","        scaling=estimator_args[\"scaling\"],\n","        time_feat=estimator_args[\"time_feat\"],\n","        rope_scaling=rope_scaling_arguments if use_rope_scaling else None,\n","\n","        batch_size=1,\n","        num_parallel_samples=100,\n","        device=device,\n","    )\n","\n","    lightning_module = estimator.create_lightning_module()\n","    transformation = estimator.create_transformation()\n","    predictor = estimator.create_predictor(transformation, lightning_module)\n","\n","    forecast_it, ts_it = make_evaluation_predictions(\n","        dataset=dataset,\n","        predictor=predictor,\n","        num_samples=num_samples\n","    )\n","    forecasts = list(forecast_it)\n","    tss = list(ts_it)\n","\n","    return forecasts, tss"]},{"cell_type":"markdown","metadata":{"id":"oFRGOKHoSvzq"},"source":["# Loading datasets of different types\n","\n","We expand upon how one can support loading data stored in different formats. This part of the demo uses the tutorial by the authors of GluonTS at https://ts.gluon.ai/stable/tutorials/data_manipulation/pandasdataframes.html. We thank the authors of GluonTS for putting together such a detailed tutorial."]},{"cell_type":"markdown","metadata":{"id":"7LhMKoC9Svzq"},"source":["## Important Points to Note\n","\n","1. The prediction function provided in this notebook performs a prediction autoregressively for the last `prediction_length` steps in the dataset passed.\n","\n","For the time being, if you would like to perform prediction, please include in the CSV/dataframe the timestamps you want to perform prediction for (with a dummy value), and set the prediction length to the required horizon.\n","\n","2. Please keep in mind that Lag-Llama needs a minimum context of `32` timestamps before the prediction timestamp starts. Beyond the `32` timestamps, Lag-Llama can use a context of upto `1092` more timestamps in history for the lags - this part is optional but you will find that as you give more context upto `(32+) 1092` timestamps, Lag-Llama's performance will improve.\n","\n","The context length passed below should not be changed and kept at 32 nevertheless. Lag-Llama will automatically use context beyond 32 for the lags, if available.\n"]},{"cell_type":"markdown","metadata":{"id":"MTEM7OvvSvzq"},"source":["## 1. Loading data from a long CSV\n","\n","We are given multiple time series stacked on top of each other in a dataframe with an `item_id` column that distinguishes different series.\n","\n","The `item_id` is required only when your dataset has multiple series.\n","\n","When your CSV has just one series, `item_id` is not required. In this case, when creating the `PandasDataset`,  `item_id` need not be passed."]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"vT93Ks5tSvzq","executionInfo":{"status":"ok","timestamp":1746624740169,"user_tz":-180,"elapsed":1182,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}},"outputId":"2b2918c4-caa6-4d18-d8ab-3ae5350fd186"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"execute_result","data":{"text/plain":["            IPG2211A2N\n","DATE                  \n","1985-01-01     72.5052\n","1985-02-01     70.6720\n","1985-03-01     62.4502\n","1985-04-01     57.4714\n","1985-05-01     55.3151"],"text/html":["\n","  <div id=\"df-6d4ececa-76a6-4166-b763-3a7e2e2d55fa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>IPG2211A2N</th>\n","    </tr>\n","    <tr>\n","      <th>DATE</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1985-01-01</th>\n","      <td>72.5052</td>\n","    </tr>\n","    <tr>\n","      <th>1985-02-01</th>\n","      <td>70.6720</td>\n","    </tr>\n","    <tr>\n","      <th>1985-03-01</th>\n","      <td>62.4502</td>\n","    </tr>\n","    <tr>\n","      <th>1985-04-01</th>\n","      <td>57.4714</td>\n","    </tr>\n","    <tr>\n","      <th>1985-05-01</th>\n","      <td>55.3151</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d4ececa-76a6-4166-b763-3a7e2e2d55fa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6d4ececa-76a6-4166-b763-3a7e2e2d55fa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6d4ececa-76a6-4166-b763-3a7e2e2d55fa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c730a749-813f-448f-8cb8-2aca650ccfb8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c730a749-813f-448f-8cb8-2aca650ccfb8')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c730a749-813f-448f-8cb8-2aca650ccfb8 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 397,\n  \"fields\": [\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1985-01-01 00:00:00\",\n        \"max\": \"2018-01-01 00:00:00\",\n        \"num_unique_values\": 397,\n        \"samples\": [\n          \"1994-07-01 00:00:00\",\n          \"2008-03-01 00:00:00\",\n          \"2004-10-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IPG2211A2N\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.387833664730909,\n        \"min\": 55.3151,\n        \"max\": 129.4048,\n        \"num_unique_values\": 397,\n        \"samples\": [\n          83.277,\n          100.4386,\n          87.5262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}],"source":["#url = (\n","    #\"https://gist.githubusercontent.com/rsnirwan/a8b424085c9f44ef2598da74ce43e7a3\"\n","    #\"/raw/b6fdef21fe1f654787fa0493846c546b7f9c4df2/ts_long.csv\"\n","#)\n","import pandas as pd\n","import torch\n","from google.colab import drive\n","drive.mount('/content/drive')\n","df = pd.read_csv('/content/drive/MyDrive/data/Electric_Production.csv', index_col=0, parse_dates=True)\n","df.head()"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"sAVFS7IrSvzr","executionInfo":{"status":"ok","timestamp":1746624743973,"user_tz":-180,"elapsed":3,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"outputs":[],"source":["# Set numerical columns as float32\n","for col in df.columns:\n","    # Check if column is not of string type\n","    if df[col].dtype != 'object' and pd.api.types.is_string_dtype(df[col]) == False:\n","        df[col] = df[col].astype('float32')\n","\n","# Create the Pandas\n","from gluonts.dataset.pandas import PandasDataset\n","df.columns = df.columns.str.strip()  # حذف فاصله اضافی از نام ستون‌ها\n","\n","# تغییر نام ستون‌ها به نام‌های مناسب GluonTS\n","df = df.rename(columns={'DATE': 'timestamp', 'IPG2211A2N': 'target'})\n","\n","# اضافه کردن ستون item_id (چون فقط یک سری زمانی داریم)\n","df['item_id'] = 'series_1'\n","df\n","# ساخت دیتاست\n","dataset = PandasDataset.from_long_dataframe(df, item_id='item_id', target='target', freq='M')\n","\n","\n","backtest_dataset = dataset\n","prediction_length = 24  # Define your prediction length. We use 24 here since the data is of hourly frequency\n","num_samples = 100 # number of samples sampled from the probability distribution for each timestep\n","device = torch.device(\"cpu\") # You can switch this to CPU or other GPUs if you'd like, depending on your environment"]},{"cell_type":"markdown","metadata":{"id":"NEWTLHk5Svzr"},"source":["### Get predictions\n","\n","We perform zero-shot inference."]},{"cell_type":"code","execution_count":41,"metadata":{"id":"RtVSLpmVSvzr","executionInfo":{"status":"ok","timestamp":1746624795067,"user_tz":-180,"elapsed":46743,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}}},"outputs":[],"source":["forecasts, tss = get_lag_llama_predictions(backtest_dataset, prediction_length, device, num_samples)\n","\n"]},{"cell_type":"markdown","source":["`forecasts` is a list of size `num_series` where `num_series` is the number of time series in your dataset. The samples can be accessed with the `.samples` object from each forecast.\n","\n","`tss` is the ground truth time series, which is useful to visualize when plotting. You can ignore it otherwise."],"metadata":{"id":"aTfGRhl59oHr"}},{"cell_type":"code","source":["len(forecasts)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KmLF3yUo9Fnv","executionInfo":{"status":"ok","timestamp":1746624797032,"user_tz":-180,"elapsed":125,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}},"outputId":"e7a5d4c5-3df4-4569-955b-7e4690f534ea"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["forecasts[0].samples.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YbzyKfKd9Mni","executionInfo":{"status":"ok","timestamp":1746624798573,"user_tz":-180,"elapsed":12,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}},"outputId":"5b4a06ba-f868-4227-f609-001c550d4dd9"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100, 24)"]},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"n6vH0cYZSvzr"},"source":["We plot the forecasts of our model on this dataset, along with the ground truth."]},{"cell_type":"code","source":["from matplotlib.dates import DateFormatter, MonthLocator\n","\n","plt.figure(figsize=(20, 15))\n","date_formater = DateFormatter('%d %b %Y')  # به‌جای روز، فقط ماه و سال\n","plt.rcParams.update({'font.size': 8})\n","\n","for idx, (forecast, ts) in islice(enumerate(zip(forecasts, tss)), 9):\n","    ax = plt.subplot(3, 3, idx+1)\n","\n","    ts = ts.to_timestamp()\n","    ts.index = pd.to_datetime(ts.index)  # اطمینان از نوع datetime\n","\n","    plt.plot(ts[-4 * prediction_length:], label=\"target\")\n","    forecast.plot(color='g')\n","\n","    plt.xticks(rotation=60)\n","    ax.xaxis.set_major_formatter(date_formater)\n","    ax.xaxis.set_major_locator(MonthLocator(interval=3))  # هر ۳ ماه یک تیک\n","\n","    ax.set_title(forecast.item_id)\n","\n","plt.gcf().tight_layout()\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":558},"id":"jr1g7JBKmvVc","executionInfo":{"status":"ok","timestamp":1746624800306,"user_tz":-180,"elapsed":403,"user":{"displayName":"mujtaba khawari","userId":"17772626090898332632"}},"outputId":"a86e804c-785f-4285-ac6e-a71160d96bd3"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1500 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[{"file_id":"1DRAzLUPxsd-0r8b-o4nlyFXrjw_ZajJJ","timestamp":1746483787303},{"file_id":"1XxrLW9VGPlZDw3efTvUi0hQimgJOwQG6","timestamp":1712345942438}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"}},"nbformat":4,"nbformat_minor":0}